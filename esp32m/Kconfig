menu "ESP32 Manager configuration"

    menu "Logging"

        choice ESP32M_LOG_LEVEL
            bool "Default log verbosity"
            default ESP32M_LOG_LEVEL_DEFAULT
            help
                Specify how much output to see in esp32m logs.
            config ESP32M_LOG_LEVEL_NONE
                bool "No output"
            config ESP32M_LOG_LEVEL_DEFAULT
                bool "Default"
            config ESP32M_LOG_LEVEL_ERROR
                bool "Error"
            config ESP32M_LOGT_LEVEL_WARN
                bool "Warning"
            config ESP32M_LOG_LEVEL_INFO
                bool "Info"
            config ESP32M_LOG_LEVEL_DEBUG
                bool "Debug"
            config ESP32M_LOG_LEVEL_VERBOSE
                bool "Verbose"
        endchoice

        config ESP32M_LOG_LEVEL
            int
            default 0 if ESP32M_LOG_LEVEL_NONE
            default 1 if ESP32M_LOG_LEVEL_DEFAULT
            default 2 if ESP32M_LOG_LEVEL_ERROR
            default 3 if ESP32M_LOG_LEVEL_WARN
            default 4 if ESP32M_LOG_LEVEL_INFO
            default 5 if ESP32M_LOG_LEVEL_DEBUG
            default 6 if ESP32M_LOG_LEVEL_VERBOSE

        config ESP32M_LOG_CONSOLE
            bool "Send log output to serial console"
            default y

        config ESP32M_LOG_UDP
            bool "Send log output to remote server over UDP"
            default n
            help
                This will send UDP packets to syslogd server

        config ESP32M_LOG_UDP_HOST
            string "Host name or IP for UDP syslogd server"
            depends on ESP32M_LOG_UDP
            default "syslog.lan"
            help
                If not specified or the host name could not be resolved, 
                will attempt to send UDP packets to the default gateway

        config ESP32M_LOG_QUEUE
            bool "Queue log messages"
            help
                This option enables buffering of log messages instead of 
                sending them to appenders immediately. When the message is logged,
                it is appended to the in-memory queue and then sent to appenders
                in a separate task, to minimize delays in the calling task
                and ensure thread safety
            default y

        config ESP32M_LOG_QUEUE_SIZE
            int "Queue size, bytes"
            depends on ESP32M_LOG_QUEUE
            default 1024

        config ESP32M_LOG_HOOK_ESPIDF
            bool "Capture ESP-IDF log messages"
            help
                Redirect messages logged by ESP-IDF ESP_LOGx macros to esp32m appenders
            default y

        config ESP32M_LOG_HOOK_UART
            bool "Capture UART output"
            help
                Attempts to capture everything that is printed to serial console via putc() / printf().
                This may help to capture additional output that does not use ESP_LOGx macros.
                Not recommended to be used in production builds, as it has known stability issues.
            default n

        endmenu

    menu "Over the Air Updates"

        config ESP32M_NET_OTA_CHECK_FOR_UPDATES
            bool "Enable automatic checking for firmware updates"
            default n
            help
                Enables periodic checking for firmware updates using the specified HTTP URL.
                ESP32M_NET_OTA_VENDOR_URL option must be defined for this feature to work.

        config ESP32M_NET_OTA_VENDOR_URL
            string "Vendor OTA URL"
            default ""
            depends on ESP32M_NET_OTA_CHECK_FOR_UPDATES
            help 
                HTTP or HTTPS URL of the remote folder with ${appname}.json file 

        config ESP32M_NET_OTA_CHECK_INTERVAL
            depends on ESP32M_NET_OTA_CHECK_FOR_UPDATES
            int "Check interval (minutes)"
            default 360
                
        config ESP32M_NET_OTA_VENDOR_ONLY
            bool "Enable updates only from the specified vendor URL"
            default y
            depends on ESP32M_NET_OTA_CHECK_FOR_UPDATES
    
    endmenu

    choice ESP32M_FS_ROOT
        bool "File system to use by default"
        default ESP32M_FS_ROOT_SPIFFS
        help
            Specify default file system.
        config ESP32M_FS_ROOT_SPIFFS
            bool "SPIFFS"
        config ESP32M_FS_ROOT_LITTLEFS
            bool "LittleFS"
    endchoice

    config ESP32M_FS_ROOT
        int
        default 0 if ESP32M_FS_ROOT_SPIFFS
        default 1 if ESP32M_FS_ROOT_LITTLEFS

    
    menu "UI Options"

        config ESP32M_WS_API
            bool "Include Websockets server API"
            default y
            help
                Runs ESP32M API over websockets
        
        config ESP32M_UI
            bool "Include UI bundle in firmware"
            depends on ESP32M_WS_API
            default y
            help
                Select this option to include compiled javascript and HTML files in the build,
                and serve the webapp UI from the device.

                [ To serve the webapp from localhost:9000 (for example during development) 
                unselect this option, and add the IP of your ESP32 in build/web-ui/webpack.config.js 
                e.g.{ defines: { esp32m: { backend: { host: '192.168.4.1' } } } } 
                and run  'yarn start' in build/webui ]
        
    endmenu # UI Options

endmenu
